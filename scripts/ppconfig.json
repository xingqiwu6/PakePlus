{"name":"retryt","url":"https://xx.atomcrea.com/","showName":"atomcrea","appid":"com.retryt.app","icon":"","iconRound":true,"state":true,"single":true,"injectJq":true,"tauriApi":false,"devbug":false,"version":"0.0.1","preview":"desktop","platform":["1-1"],"width":800,"height":600,"desc":"","jsFile":[],"filterCss":"","customJs":"console.log('%c[inject] 启动导航栏 + 密码管理 + 跳转白名单控制', 'color:orange;font-weight:bold');\n\n(function () {\n  const STORE_KEY = 'pp_password_store';\n  let passwordPanelVisible = false;\n\n  // ===== 白名单网址控制逻辑 =====\n  const { invoke } = window.__TAURI__.core;\n  const ALLOW_HOSTS = ['xx.atomcrea.com', 'odoo.atomcrea.i234.me:13102'];\n\n  function isAllowedURL(url) {\n    try {\n      const u = new URL(url);\n      return ALLOW_HOSTS.includes(u.host);\n    } catch (err) {\n      return false;\n    }\n  }\n\n  function hookClick(e) {\n    if (e.defaultPrevented) return;\n    const origin = e.target.closest('a');\n    const isBaseTargetBlank = document.querySelector('head base[target=\"_blank\"]');\n\n    if (origin && origin.href) {\n      const href = origin.href;\n      if (\n        origin.target === '_blank' ||\n        (isBaseTargetBlank && isBaseTargetBlank.target === '_blank')\n      ) {\n        e.preventDefault();\n        if (isAllowedURL(href)) {\n          console.log('[inject] 内部打开:', href);\n          location.href = href;\n        } else {\n          console.log('[inject] 外部跳转默认浏览器:', href);\n          invoke('open_url', { url: href });\n        }\n      }\n    }\n  }\n\n  window.open = function (url, target, features) {\n    if (isAllowedURL(url)) {\n      console.log('[inject] window.open 内部跳转:', url);\n      location.href = url;\n    } else {\n      console.log('[inject] window.open 外部跳转默认浏览器:', url);\n      invoke('open_url', { url });\n    }\n  };\n\n  document.addEventListener('click', hookClick, { capture: true });\n\n  // ====== 密码管理逻辑开始 ======\n\n  function setNativeValue(el, val) {\n    const lastValue = el.value;\n    el.value = val;\n    const tracker = el._valueTracker;\n    if (tracker) tracker.setValue(lastValue);\n    el.dispatchEvent(new Event('input', { bubbles: true }));\n    el.dispatchEvent(new Event('change', { bubbles: true }));\n  }\n\n  function loadStore() {\n    try { return JSON.parse(localStorage.getItem(STORE_KEY)) || []; }\n    catch { return []; }\n  }\n\n  function saveStore(store) {\n    localStorage.setItem(STORE_KEY, JSON.stringify(store));\n  }\n\n  function isValidAccountInput(el) {\n    const name = (el.name || el.id || '').toLowerCase();\n    const placeholder = (el.placeholder || '').toLowerCase();\n    const value = el.value?.trim();\n    const type = el.type?.toLowerCase();\n\n    if (type === 'password' || type === 'hidden') return false;\n    if (/db|database|source|schema|env|库/.test(name + placeholder)) return false;\n\n    const isEmailType = type === 'email';\n    const hasKeyword = /user|email|账号|账户|login|phone|mobile/.test(name + placeholder);\n    const isEmailFormat = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value || '');\n    const isPhoneFormat = /^[0-9]{9,}$/.test(value || '');\n\n    return isEmailType || hasKeyword || isEmailFormat || isPhoneFormat;\n  }\n\n  function findValidUsernameInput(passwordInput) {\n    const inputs = Array.from(document.querySelectorAll('input'));\n    const pIndex = inputs.indexOf(passwordInput);\n    if (pIndex === -1) return null;\n\n    for (let i = pIndex - 1; i >= 0 && i >= pIndex - 3; i--) {\n      const el = inputs[i];\n      if (isValidAccountInput(el)) return el;\n    }\n    return null;\n  }\n\n  function trySaveCurrentPassword() {\n    const pIn = document.querySelector('input[type=\"password\"]');\n    if (!pIn || !pIn.value) return;\n\n    const uIn = findValidUsernameInput(pIn);\n    if (!uIn || !uIn.value) return;\n\n    const username = uIn.value.trim();\n    const password = pIn.value.trim();\n    const host = location.hostname;\n\n    const extra = {};\n    document.querySelectorAll('input, select').forEach(el => {\n      const name = el.name?.toLowerCase() || '';\n      if ((name.includes('db') || name.includes('source') || name.includes('env') || name.includes('port')) && el.value) {\n        extra[name] = el.value.trim();\n      }\n    });\n\n    const store = loadStore();\n    const exists = store.some(e => e.host === host && e.username === username);\n    if (!exists) {\n      store.push({ host, username, password, extra });\n      saveStore(store);\n      console.log('[保存成功]', host, username, extra);\n    } else {\n      console.log('[跳过保存] 已存在或重复');\n    }\n  }\n  function autoFillPasswordDropdown() {\n    const store = loadStore();\n    const matches = store.filter(e => e.host === location.hostname);\n    if (matches.length === 0) return;\n\n    document.querySelectorAll('input').forEach(input => {\n      if (!isValidAccountInput(input)) return;\n\n      input.addEventListener('focus', () => {\n        // 删除旧的下拉框\n        document.querySelectorAll('.pp-dropdown').forEach(el => el.remove());\n\n        const dropdown = document.createElement('div');\n        dropdown.className = 'pp-dropdown';\n        dropdown.style.position = 'absolute';\n        dropdown.style.background = '#fff';\n        dropdown.style.border = '1px solid #ccc';\n        dropdown.style.borderRadius = '6px';\n        dropdown.style.boxShadow = '0 4px 10px rgba(0,0,0,0.1)';\n        dropdown.style.zIndex = '99999';\n        dropdown.style.fontSize = '14px';\n        dropdown.style.maxHeight = '200px';\n        dropdown.style.overflowY = 'auto';\n\n        matches.forEach(match => {\n          const item = document.createElement('div');\n          item.textContent = match.username + (match.note ? `（${match.note}）` : '');\n          item.style.padding = '6px 10px';\n          item.style.cursor = 'pointer';\n          item.style.userSelect = 'none';\n          item.onmouseenter = () => (item.style.background = '#f0f0f0');\n          item.onmouseleave = () => (item.style.background = '#fff');\n          item.onclick = () => {\n            setNativeValue(input, match.username);\n            const pIn = document.querySelector('input[type=\"password\"]');\n            if (pIn) setNativeValue(pIn, match.password);\n            dropdown.remove();\n            console.log(`[选择填充] ${match.username}`);\n          };\n          dropdown.appendChild(item);\n        });\n\n        const rect = input.getBoundingClientRect();\n        dropdown.style.top = `${rect.bottom + window.scrollY}px`;\n        dropdown.style.left = `${rect.left + window.scrollX}px`;\n        dropdown.style.minWidth = `${rect.width}px`;\n\n        document.body.appendChild(dropdown);\n\n        input.addEventListener('blur', () => {\n          setTimeout(() => dropdown.remove(), 150);\n        }, { once: true });\n      });\n    });\n  }\n\n  function detectLoginAndSave() {\n    document.addEventListener('submit', trySaveCurrentPassword, true);\n    document.addEventListener('click', (e) => {\n      const target = e.target.closest('button,input[type=\"submit\"]');\n      if (target) setTimeout(trySaveCurrentPassword, 100);\n    }, true);\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'Enter') setTimeout(trySaveCurrentPassword, 100);\n    });\n  }\n\n  function observeDomChanges() {\n    const observer = new MutationObserver(() => {\n      autoFillPasswordDropdown();\n      detectLoginAndSave();\n    });\n    observer.observe(document.body, { childList: true, subtree: true });\n\n    setTimeout(() => {\n      autoFillPasswordDropdown();\n      detectLoginAndSave();\n    }, 3000);\n  }\n\n  function forceSameWindowOpen() {\n    document.querySelectorAll('a[target=\"_blank\"]').forEach((a) => {\n      a.setAttribute('target', '_self');\n    });\n  }\n\n  function showPasswordManager(forceReload = false) {\n    const oldPanel = document.querySelector('#pp-password-panel');\n    if (oldPanel && !forceReload) {\n      oldPanel.remove();\n      passwordPanelVisible = false;\n      return;\n    }\n\n    const panel = document.createElement('div');\n    panel.id = 'pp-password-panel';\n    panel.style.position = 'fixed';\n    panel.style.bottom = '80px';\n    panel.style.right = '20px';\n    panel.style.width = '350px';\n    panel.style.maxHeight = '70vh';\n    panel.style.background = 'rgba(0,0,0,0.7)';\n    panel.style.color = '#fff';\n    panel.style.overflowY = 'auto';\n    panel.style.borderRadius = '10px';\n    panel.style.padding = '12px';\n    panel.style.fontSize = '14px';\n    panel.style.zIndex = '99999';\n    panel.style.backdropFilter = 'blur(10px)';\n    panel.innerHTML = '<strong>🔐 密码库</strong><br><br>';\n\n    const store = loadStore();\n    if (store.length === 0) {\n      panel.innerHTML += '<div style=\"margin-top:10px;\">暂无保存的账号密码。</div>';\n    } else {\n      store.forEach((entry, index) => {\n        const { host, username, password, note, extra = {} } = entry;\n        const db = extra.db || '';\n        const item = document.createElement('div');\n        item.style.marginBottom = '10px';\n        item.innerHTML = `\n          <div style=\"padding:6px; background:#ffffff11; border-radius:6px;\">\n            <div><b>🌐 ${host}</b></div>\n            <div>👤 ${username}</div>\n            <div>🔑 ${password}</div>\n            ${db ? `<div>📦 ${db}</div>` : ''}\n            <div style=\"margin-top:4px; display:flex; gap:6px;\">\n              <button style=\"background:rgba(255,255,255,0.12); border:none; border-radius:6px; padding:4px 10px; color:#fff; cursor:pointer;\" onclick=\"(function(){\n                const store = JSON.parse(localStorage.getItem('${STORE_KEY}')) || [];\n                store.splice(${index}, 1);\n                localStorage.setItem('${STORE_KEY}', JSON.stringify(store));\n                location.reload();\n              })()\">删除</button>\n              <button style=\"background:rgba(255,255,255,0.12); border:none; border-radius:6px; padding:4px 10px; color:#fff; cursor:pointer;\" onclick=\"navigator.clipboard.writeText('${host} ${username} ${password} ${db}')\">复制</button>\n              <input type=\"text\" placeholder=\"备注\" value=\"${note || ''}\" style=\"flex:1; border:none; border-radius:6px; background:rgba(255,255,255,0.15); padding:4px 8px; color:#fff;\" oninput=\"(function(val){\n                const store = JSON.parse(localStorage.getItem('${STORE_KEY}')) || [];\n                if(store[${index}]){ store[${index}].note = val; localStorage.setItem('${STORE_KEY}', JSON.stringify(store)); }\n              })(this.value)\">\n            </div>\n          </div>\n        `;\n        panel.appendChild(item);\n      });\n    }\n\n    const toolBox = document.createElement('div');\n    toolBox.style.marginTop = '12px';\n    toolBox.style.display = 'flex';\n    toolBox.style.justifyContent = 'center';\n    toolBox.style.gap = '10px';\n\n    const buttonStyle = `\n      flex: 1;\n      padding: 6px 12px;\n      border: none;\n      border-radius: 6px;\n      background: rgba(255, 255, 255, 0.12);\n      color: #fff;\n      cursor: pointer;\n      backdrop-filter: blur(6px);\n      transition: all 0.2s ease-in-out;\n      text-align: center;\n    `;\n\n    const exportBtn = document.createElement('button');\n    exportBtn.textContent = '📤 导出密码';\n    exportBtn.style.cssText = buttonStyle;\n    exportBtn.onclick = () => {\n      const data = JSON.stringify(loadStore(), null, 2);\n      const blob = new Blob([data], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'passwords.json';\n      a.click();\n      URL.revokeObjectURL(url);\n    };\n\n    const importLabel = document.createElement('label');\n    importLabel.innerText = '📥 导入密码';\n    importLabel.style.cssText = buttonStyle;\n    const importInput = document.createElement('input');\n    importInput.type = 'file';\n    importInput.accept = '.json';\n    importInput.style.display = 'none';\n    importInput.onchange = (e) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        try {\n          const imported = JSON.parse(reader.result);\n          if (!Array.isArray(imported)) throw new Error('无效数据');\n          const current = loadStore();\n          const merged = [...current];\n          imported.forEach(newEntry => {\n            const exists = merged.some(old => old.host === newEntry.host && old.username === newEntry.username);\n            if (!exists) merged.push(newEntry);\n          });\n          saveStore(merged);\n          showPasswordManager(true);\n        } catch {\n          alert('导入失败：无效的 JSON 文件。');\n        }\n      };\n      reader.readAsText(e.target.files[0]);\n    };\n    importLabel.appendChild(importInput);\n    toolBox.appendChild(exportBtn);\n    toolBox.appendChild(importLabel);\n    panel.appendChild(toolBox);\n    document.body.appendChild(panel);\n    passwordPanelVisible = true;\n\n    setTimeout(() => {\n      const closeOnClickOutside = (e) => {\n        const isInside = e.target.closest('#pp-password-panel') || e.target.closest('#pp-password-panel-button');\n        if (!isInside) {\n          document.removeEventListener('click', closeOnClickOutside, true);\n          const panel = document.querySelector('#pp-password-panel');\n          if (panel) panel.remove();\n          passwordPanelVisible = false;\n        }\n      };\n      document.addEventListener('click', closeOnClickOutside, true);\n    }, 10);\n  }\n  function createNavBar() {\n    const navBar = document.createElement('div');\n    navBar.style.position = 'fixed';\n    navBar.style.bottom = '20px';\n    navBar.style.right = '15px';\n    navBar.style.zIndex = '9999';\n    navBar.style.display = 'flex';\n    navBar.style.alignItems = 'center';\n    navBar.style.gap = '6px';\n\n    let isExpanded = localStorage.getItem('menu_expanded') === 'true';\n\n    const menuBox = document.createElement('div');\n    menuBox.style.display = 'flex';\n    menuBox.style.gap = '6px';\n    menuBox.style.padding = '6px';\n    menuBox.style.background = 'rgba(255, 255, 255, 0.05)';\n    menuBox.style.backdropFilter = 'blur(6px)';\n    menuBox.style.borderRadius = '6px';\n    menuBox.style.boxShadow = '0 2px 5px rgba(0,0,0,0.15)';\n    menuBox.style.transition = 'all 0.3s ease';\n\n    const toggleBtn = document.createElement('button');\n    toggleBtn.textContent = '☰';\n    toggleBtn.style.padding = '6px 10px';\n    toggleBtn.style.border = 'none';\n    toggleBtn.style.borderRadius = '6px';\n    toggleBtn.style.cursor = 'pointer';\n    toggleBtn.style.fontSize = '16px';\n    toggleBtn.style.fontWeight = 'bold';\n    toggleBtn.style.backdropFilter = 'blur(6px)';\n    toggleBtn.style.transition = 'background 0.3s ease';\n\n    const createButton = (text, onClick) => {\n      const btn = document.createElement('button');\n      btn.textContent = text;\n      btn.style.padding = '6px 12px';\n      btn.style.border = 'none';\n      btn.style.borderRadius = '4px';\n      btn.style.cursor = 'pointer';\n      btn.style.fontWeight = 'bold';\n      btn.onclick = onClick;\n      return btn;\n    };\n\n    const homeBtn = createButton('⌂', () => location.href = 'https://xx.atomcrea.com/');\n    const backBtn = createButton('←', () => history.back());\n    const forwardBtn = createButton('→', () => history.forward());\n    const passBtn = createButton('⚷', () => showPasswordManager(false));\n    passBtn.id = 'pp-password-panel-button';\n\n    menuBox.appendChild(backBtn);\n    menuBox.appendChild(forwardBtn);\n    menuBox.appendChild(homeBtn);\n    menuBox.appendChild(passBtn);\n\n    toggleBtn.onclick = () => {\n      isExpanded = !isExpanded;\n      localStorage.setItem('menu_expanded', isExpanded.toString());\n      updateMenuDisplay();\n    };\n\n    const updateMenuDisplay = () => {\n      if (isExpanded) {\n        menuBox.style.transform = 'translateX(0)';\n        menuBox.style.opacity = '1';\n        menuBox.style.pointerEvents = 'auto';\n      } else {\n        menuBox.style.transform = 'translateX(100%)';\n        menuBox.style.opacity = '0';\n        menuBox.style.pointerEvents = 'none';\n      }\n    };\n\n    const updateButtonColors = () => {\n      const bg = getComputedStyle(document.body).backgroundColor;\n      let isDark = false;\n      if (bg.startsWith('rgb')) {\n        const [r, g, b] = bg.match(/\\d+/g).map(Number);\n        const brightness = (r * 299 + g * 587 + b * 114) / 1000;\n        isDark = brightness < 128;\n      }\n      const iconColor = isDark ? '#fff' : '#000';\n      const bgColor = isDark ? '#ffffff22' : '#00000011';\n      const hoverColor = isDark ? '#ffffff55' : '#00000022';\n      [...menuBox.children, toggleBtn].forEach((btn) => {\n        btn.style.background = bgColor;\n        btn.style.color = iconColor;\n        btn.onmouseenter = () => (btn.style.background = hoverColor);\n        btn.onmouseleave = () => (btn.style.background = bgColor);\n      });\n    };\n\n    navBar.appendChild(menuBox);\n    navBar.appendChild(toggleBtn);\n    document.body.appendChild(navBar);\n    updateButtonColors();\n    updateMenuDisplay();\n  }\n\n  window.addEventListener('DOMContentLoaded', () => {\n    createNavBar();\n    forceSameWindowOpen();\n    autoFillPasswordDropdown();\n    detectLoginAndSave();\n    observeDomChanges();\n  });\n})();\n","isHtml":false,"htmlPath":"","htmlFiles":[],"more":{"windows":{"label":"retryt","title":"atomcrea","url":"https://xx.atomcrea.com/","userAgent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36","width":1400,"height":900,"theme":null,"resizable":true,"fullscreen":false,"maximized":false,"minWidth":400,"minHeight":300,"maxWidth":1920,"maxHeight":1080,"decorations":true,"transparent":false,"titleBarStyle":"Visible","visible":true,"focus":true,"closable":true,"minimizable":true,"maximizable":true,"alwaysOnTop":false,"alwaysOnBottom":false,"center":false,"skipTaskbar":false,"tabbingIdentifier":null,"parent":null,"dragDropEnabled":true,"browserExtensionsEnabled":false,"devtools":true,"contentProtected":false,"hiddenTitle":false,"incognito":false,"proxyUrl":null,"useHttpsScheme":false,"zoomHotkeysEnabled":false,"acceptFirstMouse":false,"create":false}},"phone":{"safeArea":{"top":0,"bottom":0,"left":0,"right":0},"header":{"show":false,"title":"","backgroundColor":"","color":"","fontSize":16,"fontWeight":"bold","loading":false,"toolBar":false,"toolBarBackgroundColor":"","toolBarColor":"","toolBarFontSize":16,"toolBarFontWeight":"bold"},"siderMenu":{"show":false,"width":0,"backgroundColor":"","color":"","fontSize":16,"fontWeight":"bold","title":"","titleColor":"","titleFontSize":16,"titleFontWeight":"bold"},"tabBar":{"show":false,"backgroundColor":"","color":"","activeColor":"","fontSize":16,"fontWeight":"bold","tabBarItem":[]},"webview":{"userAgent":"","javaScriptEnabled":true,"domStorageEnabled":true,"allowFileAccess":true,"loadWithOverviewMode":true,"setSupportZoom":true,"clearCache":true}},"ios":{"name":"retryt","showName":"atomcrea","version":"0.0.1","webUrl":"https://xx.atomcrea.com/","id":"com.retryt.app.ios","icon":"./app-icon.png","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","isHtml":false,"debug":false},"android":{"name":"retryt","showName":"atomcrea","version":"0.0.1","webUrl":"https://xx.atomcrea.com/","id":"com.retryt.app.android","icon":"./app-icon.png","input":"./app-icon.png","output":"./res","rounded":true,"copyTo":"./app/src/main/res","androidResDir":"./app/src/main/res","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","isHtml":false,"debug":false},"desktop":{"name":"retryt","showName":"atomcrea","version":"0.0.1","id":"com.retryt.app.desktop","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途，否则后果自负）","webUrl":"https://xx.atomcrea.com/","iconPath":"../app-icon.png","inputPath":"../app-icon.png","tempPath":"./processed-image.png","icnsPath":"../src-tauri/icons/icon.icns","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途，否则后果自负）","isHtml":false,"single":true,"state":true,"injectJq":false,"tauriApi":false,"buildMethod":"cloud","debug":false}}